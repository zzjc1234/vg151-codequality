name: Package Distribution

on:
  push:
    tags:
      - 'v*'
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-macos:
    name: Build macOS Package
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - name: Install dependencies
        run: |
          brew install llvm cmake

      - name: Build
        run: |
          ./build-cross-platform.sh --type Release

      - name: Create macOS Package
        run: |
          cd build
          # Install to staging directory
          make DESTDIR=macos-install install
          
          # Create a zip package for macOS - note the library is installed to usr/local/lib by default
          mkdir -p vg151-codequality-macos/usr/lib
          cp -r macos-install/usr/local/lib/libcodequality* vg151-codequality-macos/usr/lib/
          zip -r vg151-codequality-macos.zip vg151-codequality-macos
          echo "macos_package=vg151-codequality-macos.zip" >> $GITHUB_ENV

      - name: Upload macOS Package
        uses: actions/upload-artifact@v4
        with:
          name: vg151-codequality-macos
          path: build/vg151-codequality-macos.zip

  build-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        run: |
          apt-get update
          apt-get install -y wget gnupg software-properties-common cmake build-essential lsb-release \
          devscripts debhelper dh-make lintian libclang-18-dev llvm-18-dev libzstd-dev zlib1g-dev \
          libedit-dev libcurl4-openssl-dev libxml2-dev

      - name: Install LLVM
        run: |
          mkdir -p /etc/apt/keyrings && \
          wget -O- https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/keyrings/llvm.asc | gpg --dearmor -o /etc/apt/keyrings/llvm.gpg
          echo "deb [signed-by=/etc/apt/keyrings/llvm.gpg] http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" > /etc/apt/sources.list.d/llvm.list
          apt-get update
          apt-get install -y clang-18 llvm-18 llvm-18-dev libclang-18-dev

      - name: Build
        run: |
          ./build-cross-platform.sh --type Release

      - name: Create DEB Package
        run: |
          cd build
          PACKAGE_NAME="vg151-codequality"
          PACKAGE_VERSION=${GITHUB_REF#refs/tags/}
          if [ -z "$PACKAGE_VERSION" ] || [ "$PACKAGE_VERSION" = "$GITHUB_REF" ]; then
            PACKAGE_VERSION="0.0.0-dev"
          fi
          PACKAGE_VERSION=${PACKAGE_VERSION#v}
          
          # Install to staging directory
          make DESTDIR=debian-install install
          
          # Create packaging structure - note the library is installed to usr/local/lib by default
          mkdir -p "$PACKAGE_NAME-$PACKAGE_VERSION/usr/lib"
          cp -r debian-install/usr/local/lib/libcodequality* "$PACKAGE_NAME-$PACKAGE_VERSION/usr/lib/"
          
          # Create debian control files
          mkdir -p "$PACKAGE_NAME-$PACKAGE_VERSION/DEBIAN"
          cat > "$PACKAGE_NAME-$PACKAGE_VERSION/DEBIAN/control" << EOF
Package: $PACKAGE_NAME
Version: $PACKAGE_VERSION
Section: devel
Priority: optional
Architecture: amd64
Depends: llvm-18, libclang-18-dev
Maintainer: vg151-codequality Maintainers
Description: A code quality tool for VG151 course
 This package contains the vg151-codequality library for use with Clang Static Analyzer.
EOF
          
          # Build the package
          dpkg-deb --build "$PACKAGE_NAME-$PACKAGE_VERSION"
          echo "deb_package=${PACKAGE_NAME}-${PACKAGE_VERSION}.deb" >> $GITHUB_ENV

      - name: Upload DEB Package
        uses: actions/upload-artifact@v4
        with:
          name: vg151-codequality-deb
          path: build/vg151-codequality*.deb

  build-rpm:
    name: Build RPM Package
    runs-on: ubuntu-latest
    container:
      image: fedora:38
    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        run: |
          dnf update -y
          dnf install -y cmake gcc gcc-c++ make llvm-devel clang-devel zlib-devel libzstd-devel \
          libedit-devel libcurl-devel libxml2-devel rpm-build rpmlint git which

      - name: Build
        run: |
          ./build-cross-platform.sh --type Release

      - name: Create RPM Package
        run: |
          cd build
          PACKAGE_NAME="vg151-codequality"
          PACKAGE_VERSION=${GITHUB_REF#refs/tags/}
          if [ -z "$PACKAGE_VERSION" ] || [ "$PACKAGE_VERSION" = "$GITHUB_REF" ]; then
            PACKAGE_VERSION="0.0.0-dev"
          fi
          PACKAGE_VERSION=${PACKAGE_VERSION#v}
          
          # Install to staging directory
          make DESTDIR=rpm-install install
          
          # Create RPM build directory structure
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
          
          # Create the library installation
          mkdir -p ~/rpmbuild/BUILDROOT/${PACKAGE_NAME}-${PACKAGE_VERSION}-1.x86_64/usr/lib
          cp -r rpm-install/usr/local/lib/libcodequality* ~/rpmbuild/BUILDROOT/${PACKAGE_NAME}-${PACKAGE_VERSION}-1.x86_64/usr/lib/
          
          # Create spec file
          cat > ~/rpmbuild/SPECS/vg151-codequality.spec << EOF
Name:           vg151-codequality
Version:        $PACKAGE_VERSION
Release:        1%{?dist}
Summary:        A code quality tool for VG151 course

License:        MIT
BuildArch:      x86_64

BuildRequires:  cmake, gcc, gcc-c++, make, llvm-devel, clang-devel
Requires:       llvm, clang

%description
A code quality tool for VG151 course based on Clang Static Analyzer.

%files
/usr/lib/libcodequality.so

%changelog
* $(date +"%a %b %d %Y") VG151 Team <vg151@example.com> - $PACKAGE_VERSION-1
- Initial package
EOF
          
          # Build the RPM
          rpmbuild -bb ~/rpmbuild/SPECS/vg151-codequality.spec
          RPM_FILE=$(find ~/rpmbuild/RPMS -name "*.rpm" | head -1)
          if [ -n "$RPM_FILE" ]; then
            cp "$RPM_FILE" .
            echo "rpm_package=$(basename "$RPM_FILE")" >> $GITHUB_ENV
          else
            echo "Error: RPM file not found"
            exit 1
          fi

      - name: Upload RPM Package
        uses: actions/upload-artifact@v4
        with:
          name: vg151-codequality-rpm
          path: build/vg151-codequality*.rpm

  build-aur:
    name: Build AUR Package
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel cmake clang llvm zlib libxml2 libedit libzstd

      - name: Build
        run: |
          ./build-cross-platform.sh --type Release

      - name: Create AUR Package
        run: |
          cd build
          PACKAGE_NAME="vg151-codequality"
          PACKAGE_VERSION=${GITHUB_REF#refs/tags/}
          if [ -z "$PACKAGE_VERSION" ] || [ "$PACKAGE_VERSION" = "$GITHUB_REF" ]; then
            PACKAGE_VERSION="0.0.0.vcs"
          fi
          PACKAGE_VERSION=${PACKAGE_VERSION#v}
          
          # Create AUR package structure
          mkdir -p aur-package
          cd aur-package
          
          # Determine version
          VERSION="$PACKAGE_VERSION"
          if [[ $VERSION == v* ]]; then
            VERSION=${VERSION#v}
          fi
          
          # Create PKGBUILD
          cat > PKGBUILD << EOF
# Maintainer: VG151 Team
pkgname=vg151-codequality
pkgver=${VERSION//v/}
pkgrel=1
pkgdesc="A code quality tool for VG151 course based on Clang Static Analyzer"
arch=('x86_64')
url="https://github.com/your-org/vg151-codequality"
license=('MIT')
depends=('llvm' 'clang')
makedepends=('cmake' 'clang' 'llvm')
source=("git+https://github.com/your-org/vg151-codequality.git")

build() {
  cd vg151-codequality
  ./build-cross-platform.sh --type Release
}

package() {
  cd vg151-codequality/build
  make DESTDIR="\$pkgdir" install
}
EOF

          echo "aur_package=aur-package" >> $GITHUB_ENV

      - name: Upload AUR Package
        uses: actions/upload-artifact@v4
        with:
          name: vg151-codequality-aur
          path: build/aur-package

  release:
    name: Create Release
    needs: [build-macos, build-deb, build-rpm, build-aur]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          path: packages

      - name: Display packages
        run: |
          find packages -type f -name "*.*"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            packages/vg151-codequality-macos/vg151-codequality-macos.zip
            packages/vg151-codequality-deb/vg151-codequality*.deb
            packages/vg151-codequality-rpm/vg151-codequality*.rpm
            packages/vg151-codequality-aur/PKGBUILD
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref }}
          body: |
            ## Package Distribution for vg151-codequality ${{ github.ref_name }}

            This release contains pre-built packages for different distributions:

            - **macOS**: Binary package for macOS (Apple Silicon and Intel)
            - **DEB**: Debian/Ubuntu package
            - **RPM**: Fedora/RHEL package  
            - **AUR**: Arch Linux package (PKGBUILD file)

            Install the appropriate package for your system:

            **Ubuntu/Debian:**
            ```bash
            sudo dpkg -i vg151-codequality*.deb
            ```

            **Fedora/RHEL:**
            ```bash
            sudo rpm -i vg151-codequality*.rpm
            ```

            **Arch Linux (AUR):**
            ```bash
            git clone https://aur.archlinux.org/vg151-codequality.git
            cd vg151-codequality
            makepkg -si
            ```

            **macOS:**
            Extract the zip file and copy the library to appropriate location.